# -*- coding: utf-8 -*-


"""
============================
Values of Random Walk Visits
============================

:Author:
    Moritz Emanuel Beber
:Date:
    2014-01-27
:Copyright:
    Copyright |c| 2014, Jacobs University Bremen gGmbH, all rights reserved.
:File:
    visits.py

.. |c| unicode:: U+A9
"""


__all__ = ["ConstantValue", "DegreeDependentValue"]


import numpy


class ConstantValue(object):
    """
    An estimator of the value generated by a random walker visiting a node.
    """

    def __init__(self, constant=1.0, **kw_args):
        """
        Instantiation determines the constant value.
        """
        super(ConstantValue, self).__init__(**kw_args)
        self.value = float(constant)

    def __call__(self, *args):
        """
        Function definition ignores any positional arguments for compatibility
        reasons.
        """
        return self.value


class DegreeDependentValue(object):
    """
    A degree-dependent estimator of the value generated by a random walker
    visiting a node.

    References
    ----------
    .. [1] Eisler, Z., and J. Kertész.
           “Random Walks on Complex Networks with Inhomogeneous Impact.”
           *Phys. Rev. E* 71, no. 5 (May 2005): 057104. doi:10.1103/PhysRevE.71.057104.
    """

    def __init__(self, graph, indices, weight=None, mu=1.0, **kw_args):
        """
        Estimates the value of nodes based on their (weighted) degree and an
        exponent.

        Parameters
        ----------
        graph: nx.(Di)Graph
            The graph from which to obtain the degree of the nodes.
        indices: dict
            A map from nodes to their integer indeces [0; N - 1].
        weight: str (optional)
            The keyword for the edge-weight attribute.
        mu: float (optional)
            The exponent of the value.
        """
        super(DegreeDependentValue, self).__init__(**kw_args)
        self.values = numpy.zeros(len(graph), dtype=float)
        mu = float(mu)
        for (node, deg) in graph.degree_iter(weight=weight):
            self.values[indices[node]] = numpy.power(float(deg), mu)

    def __call__(self, index, *args):
        """
        Calls with the index of a node return its pre-computed value.
        """
        return self.values[index]

